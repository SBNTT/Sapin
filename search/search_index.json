{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"component_linting/","title":"Component linting","text":"<p>Under the hoods, the Sapin compiler merges the php and html part of a component into a single php class. The template part is transformed into a <code>render</code> method that belong to this class.</p> <p>Given the Greeter Sapin component:</p> The Greeter component<pre><code>&lt;?php\n\nnamespace App\\Component;\n\nfinal readonly class Greeter\n{\n    public function __construct(\n        public string $name,\n    ) {}\n} ?&gt;\n\n&lt;template&gt;\n    &lt;span&gt;Hello, {{ $this-&gt;name }}!&lt;/span&gt;\n&lt;/template&gt;\n</code></pre> <p>Here is its compiled version (simplified): <pre><code>&lt;?php\n\nclass _Greeter\n{\n    public function __construct(\n        public string $name,\n    ) {\n    }\n\n    public function render(): void\n    {\n        ?&gt;&lt;span&gt;Hello, &lt;?php echo $this-&gt;name;?&gt;&lt;/span&gt;&lt;?php\n    }\n}\n</code></pre></p> <p>Sapin does not use any opaque array to carry over data from php to templates rendering (like some other templates  engines like twig do). It consumes the data it needs directly.</p> <p>Thus, compiled Sapin components are fully lintable ! This give the opportunity to validate all the php expression you write inside the template part. If you use a variable, method, or anything else that is not defined, your linter  will be able to detect that </p>"},{"location":"component_linting/#linter-configuration","title":"Linter configuration","text":"<p>WIP</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#vanilla-php-todos-list","title":"Vanilla php todos list","text":"<p>https://github.com/SBNTT/Sapin/examples/todos-vanilla</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<p>WIP</p>"},{"location":"installation/#vanilla-php","title":"Vanilla PHP","text":"<p>WIP</p>"},{"location":"installation/#symfony","title":"Symfony","text":"<p>WIP</p>"},{"location":"installation/#laravel","title":"Laravel","text":"<p>WIP</p>"},{"location":"interop/","title":"Interop","text":""},{"location":"interop/#twig","title":"Twig","text":"<p>WIP</p>"},{"location":"interop/#blade","title":"Blade","text":"<p>WIP</p>"},{"location":"introduction/","title":"Introduction","text":"<p>A Sapin component consists of a php class associated with an html template contained in a <code>&lt;template&gt;</code> tag.</p> <p>The template section of a Sapin component is written in HTML based syntax and  must take place outside the php tags.</p> <p>The component compiler provides support for special attributes, and an interpolation syntax which can contains php expressions. There is no \"language in the language\", just php in html.</p> <p>A sapin component file must have the <code>.phtml</code> extension.</p> The Greeter component<pre><code>&lt;?php \n\nnamespace App\\Component;\n\nfinal readonly class Greeter\n{\n    public function __construct(\n        public string $name,\n    ) {}\n} ?&gt;\n\n&lt;template&gt;\n    &lt;span&gt;Hello, {{ $this-&gt;name }}!&lt;/span&gt;\n&lt;/template&gt;\n</code></pre> <p>As you can see, these two parts belong to the same file somewhat like Vue.js. Since it is legal to mix HTML  and PHP in the same file, your favorite editor will not complain about it.</p> <p>phtml for the win !!</p> <p>The idea of mixing HTML and PHP may sounds terrible. I mean, in most case, it is . Sapin takes advantage of this possibility and provide an elegant and convenient way to represent  a part of an user interface.</p>"},{"location":"lifecycle_hooks/","title":"Lifecycle hooks","text":"<p>WIP</p>"},{"location":"roadmap/","title":"Roadmap","text":"<p>WIP </p>"},{"location":"usage/","title":"Usage","text":"<p>WIP </p>"},{"location":"template_syntax/composition/","title":"Composition","text":"<p>Given this component: <pre><code>&lt;?php\n\nnamespace App\\Component;\n\nfinal readonly class Greeter\n{\n    public function __construct(\n        public string $name,\n    ) {}\n} ?&gt;\n\n&lt;template&gt;\n    &lt;span&gt;Hello, {{ $this-&gt;name }}!&lt;/span&gt;\n&lt;/template&gt;\n</code></pre></p> <p>In order to use it in another component template, you have to import it using the <code>:uses</code> attribute on the <code>&lt;template&gt;</code> tag first.</p> <p>All the required <code>Greeter</code> component constructor arguments must be set using computed attributes. The order does not matter given that Sapin will invoke the constructor with the named argument syntax. <pre><code>&lt;template :uses=\"App\\Component\\Greeter\"&gt;\n    &lt;h1&gt;My app&lt;/h1&gt;\n    &lt;Greeter :name=\"John\" /&gt;\n&lt;/template&gt;\n</code></pre></p> <p>the <code>:uses</code> attribute may contains multiple imports. They must be coma separated. Trailing comas are allowed.</p> <p>These following examples are valid: <pre><code>&lt;template :uses=\"App\\Component\\ComponentA, App\\Component\\ComponentB\"&gt;\n   ...\n&lt;/template&gt;\n</code></pre></p> <pre><code>&lt;template :uses=\"\n    App\\Component\\ComponentA, \n    App\\Component\\ComponentB\",\n&gt;\n   ...\n&lt;/template&gt;\n</code></pre> <p>An import can be aliased following the same syntax as php: <pre><code>&lt;template :uses=\"\n    App\\Foo\\Buzz as BuzzA, \n    App\\Bar\\Buzz as BuzzB\"\n&gt;\n    &lt;BuzzA /&gt;\n    &lt;BuzzB /&gt;\n&lt;/template&gt;\n</code></pre></p> <p>Info</p> <p>You can use conditional and/or looping attributes on component invocation Repeat the component rendering for each element of an array<pre><code>&lt;template :uses=\"App\\Component\\Fruit\"&gt;\n    &lt;Fruit\n        :foreach=\"$this-&gt;fruits as $fruit\"\n        :fruit=\"$fruit\"\n    /&gt;\n&lt;/template&gt;\n</code></pre> Conditionaly render a component<pre><code>&lt;template :uses=\"App\\Component\\Greeter\"&gt;\n    &lt;Greeter\n        :if=\"$this-&gt;shouldGreet\"\n        :name=\"John\"\n    /&gt;\n&lt;/template&gt;\n</code></pre></p>"},{"location":"template_syntax/computed_attributes/","title":"Computed attributes","text":"<p>When any of your attributes is prefixed with a colon (<code>:</code>), the output of the given expression will be used as the attribute value (the colon character will be dropped during rendering).</p> <p>The attribute value must be a php expression which resolves to a stringable data. Computed attribute example<pre><code>&lt;div :id=\"$this-&gt;myId\"&gt;&lt;/div&gt;\n</code></pre> In this case, if your component class has a property <code>myId</code> that has <code>42</code> as a value, the div above will render as <code>&lt;div id=\"42\"&gt;&lt;/div&gt;</code></p>"},{"location":"template_syntax/conditional_rendering/","title":"Conditional rendering","text":""},{"location":"template_syntax/conditional_rendering/#if","title":"If","text":"<p>The special <code>:if</code> attribute should be used to allow a block to render only under certain circumstances. Its value must be a valid php boolean expression.</p> <p>In the following example, the entire <code>&lt;span&gt;</code> tag will not be rendered if <code>$this-&gt;a &gt; $this-&gt;b</code> resolves to <code>false</code> <pre><code>&lt;span :if=\"$this-&gt;a &gt; $this-&gt;b\"&gt;\n    a is greater than b!\n&lt;/span&gt;\n</code></pre></p>"},{"location":"template_syntax/conditional_rendering/#else","title":"Else","text":"<p>Use <code>:else</code> attribute to render a block following another whose <code>:if</code> expression has been resolved to <code>false</code> <pre><code>&lt;span :if=\"$this-&gt;a &gt; $this-&gt;b\"&gt;\n    a is greater than b!\n&lt;/span&gt;\n&lt;span :else&gt;\n    a is smaller than b!\n&lt;/span&gt;\n</code></pre></p>"},{"location":"template_syntax/conditional_rendering/#else-if","title":"Else if","text":"<pre><code>&lt;span :if=\"$this-&gt;a &gt; $this-&gt;b\"&gt;\n    a is greater than b !\n&lt;/span&gt;\n&lt;span :else-if=\"$this-&gt;a &lt; $this-&gt;b\"&gt;\n    a is smaller than b !\n&lt;/span&gt;\n&lt;span :else&gt;\n    a is the same as b !\n&lt;/span&gt;\n</code></pre>"},{"location":"template_syntax/fragments/","title":"Fragments","text":"<p>A fragment is meant to group multiple sibling tags. Useful if you want to apply a conditional / array rendering to multiple elements at once without introducing a pointless <code>&lt;div&gt;&lt;/div&gt;</code>. <pre><code>&lt;fragment :if=\"count($this-&gt;fruits) &gt; 0\"&gt;\n    &lt;span&gt;Available fruits:&lt;/span&gt;\n    &lt;ul&gt;\n        &lt;li :foreach=\"$this-&gt;fruits as $fruit\"&gt;\n            {{ $fruit }}\n        &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/fragment&gt;\n&lt;span :else&gt;\n    No fruits available...\n&lt;/span&gt;\n</code></pre></p> <p>Note</p> <p>Using a fragment without using any special attribute (like conditional or array rendering) literally does nothing.</p>"},{"location":"template_syntax/interpolation/","title":"Interpolation","text":"<p>The interpolation syntax allow you to inject some data from php inside html tags. It consists of a php expression between two curly braces. The php expression must be convertable into a string (implement Stringable or be a string).</p> Basic Interpolation<pre><code>&lt;span&gt;Hello, {{ $this-&gt;name }}!&lt;/span&gt;\n</code></pre> Interpolation within an html attribute<pre><code>&lt;div id=\"item-{{ $this-&gt;id }}\"&gt;&lt;/div&gt;\n</code></pre> <p>Note</p> <p>You have access to <code>$this</code>. The same applies to any other php expression belonging to the template section of a component.</p> <p>This is because the template part of a Sapin component is compiled to a method that belong to a copy of your  class, giving it access to <code>$this</code>.</p>"},{"location":"template_syntax/loops/","title":"Loops","text":""},{"location":"template_syntax/loops/#foreach","title":"Foreach","text":"<p>Use the special <code>:foreach</code> attribute on a block that needs to be rendered as many times as there are elements in a list.</p> <p>Its value must be a valid plain php <code>foreach</code> expression. <pre><code>&lt;ul&gt;\n    &lt;li :foreach=\"$this-&gt;fruits as $fruit\"&gt;\n        {{ $fruit }}\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre></p>"},{"location":"template_syntax/loops/#for","title":"For","text":"<p>Same, but this time, the <code>:for</code> attribute value must be a valid <code>for</code> loop expression <pre><code>&lt;ul&gt;\n    &lt;li :for=\"$i = 0; $i &lt; 10; $i++\"&gt;\n        {{ $i }}\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre></p> <p>Info</p> <p>Any local variable introduced by the <code>:for</code> or <code>:foreach</code> expression is available inside its corresponding block</p>"},{"location":"template_syntax/loops/#conditional-and-array-rendering-attributes-combination","title":"Conditional and array rendering attributes combination","text":"<p><code>:if</code> <code>:else-if</code> <code>:else</code> (conditional rendering attributes) and looping attributes can be used on the same html  element but behaves differently depending on their declaration order.</p>"},{"location":"template_syntax/loops/#conditional-rendering-attribute-first","title":"Conditional rendering attribute first","text":"<p>When using one of <code>:if</code> <code>:else-if</code> <code>:else</code> attributes first, the entire loop rendering will depend on the output of the conditional expression.</p> <p>This template will or will not render the entire array (imagine a for[each] loop inside an if statement):</p> Conditionaly render the entire array<pre><code>&lt;span \n    :if=\"$this-&gt;shouldDisplayNumbers\" \n    :foreach=\"$this-&gt;numbers as $number\"\n&gt;\n    {{ $number }}\n&lt;/span&gt;\n</code></pre>"},{"location":"template_syntax/loops/#looping-attribute-first","title":"Looping attribute first","text":"<p>When using one of the looping attributes first, the only conditional attribute allowed is <code>:if</code>. In this situation, the conditional expression acts as a filter on the list (imagine an if statement inside a for[each] loop).</p> <p>This template only render even numbers: Filter array's elements to render<pre><code>&lt;span\n    :foreach=\"$this-&gt;numbers as $number\"\n    :if=\"$number % 2 == 0\" \n&gt;\n    {{ $number }}\n&lt;/span&gt;\n</code></pre></p>"},{"location":"template_syntax/slots/","title":"Slots","text":"<p>The slot system allows components to receive blocks of HTML content, providing flexibility and  reusability in component design.</p>"},{"location":"template_syntax/slots/#defining-slots","title":"Defining Slots","text":"<p>To define slots within a component, encapsulate the desired content areas within  tags and specify a  unique name for each slot using the :name attribute. <p><pre><code>&lt;?php\nnamespace App\\Component;\n\nfinal readonly class Card \n{\n} ?&gt;\n\n&lt;template&gt;\n    &lt;div class=\"card\"&gt;\n        &lt;div class=\"card-title\"&gt;\n            &lt;slot :name=\"title\"&gt;\n                Default Title\n            &lt;/slot&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"card-content\"&gt;\n            &lt;slot :name=\"content\"&gt;&lt;/slot&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"card-footer\"&gt;\n            &lt;slot :name=\"footer\"&gt;\n                Default Footer\n            &lt;/slot&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n</code></pre> In this example, the component Card defines three slots: title, content, and footer.</p>"},{"location":"template_syntax/slots/#using-slots","title":"Using slots","text":"<p><pre><code>&lt;?php\nnamespace App\\Component;\n\nfinal readonly class HomePage \n{\n} ?&gt;\n&lt;template :uses=\"App\\Component\\Card\"&gt;\n    &lt;Card&gt;\n        &lt;fragment :slot=\"title\"&gt;My Card Title&lt;/fragment&gt;\n\n        &lt;p :slot=\"content\"&gt;\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusamus assumenda aut debitis distinctio, \n            doloremque dolores impedit iste iusto, magni nam numquam optio quo recusandae sint ullam ut voluptas \n            voluptatem voluptatum.\n        &lt;/p&gt;\n\n        &lt;fragment :slot=\"footer\"&gt;Custom Footer&lt;/fragment&gt;\n    &lt;/Card&gt;\n&lt;/template&gt;\n</code></pre> When defining a slot content, you do not have access to any additional scope. Inside <code>&lt;p :slot=\"content\"&gt;</code>, <code>$this</code> corresponds to an <code>HomePage</code> instance, somewhat if there was no <code>:slot</code> attribute </p>"},{"location":"template_syntax/slots/#fallback-content","title":"Fallback content","text":"<pre><code>&lt;template&gt;\n    &lt;Card&gt;\n        &lt;p :slot=\"content\"&gt;\n            Only content provided. No title or footer.\n        &lt;/p&gt;\n    &lt;/Card&gt;\n&lt;/template&gt;\n</code></pre> <p>In this case, since the title and footer slots are not filled, the default content specified in the  Card component template is used.</p>"},{"location":"template_syntax/slots/#default-slot","title":"Default slot","text":"<p>When a child element of a component does not explicitly declare a <code>:slot</code> attribute, it is automatically assigned to a reserved slot named <code>children</code>. </p> <p>This implicit slot behaves like any named slot and can be referenced in the component template using:</p> <pre><code>&lt;slot :name=\"children\" /&gt;\n</code></pre> <p>This provides a convenient shorthand for content that does not require an explicit slot declaration, while preserving  full control in the component layout.</p> <pre><code>&lt;?php\nnamespace App\\Component;\n\nfinal readonly class Card \n{\n} ?&gt;\n\n&lt;template&gt;\n    &lt;div class=\"card\"&gt;\n        &lt;slot :name=\"children\" /&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n</code></pre> <pre><code>&lt;template&gt;\n    &lt;Card&gt;\n        &lt;p&gt;This paragraph is implicitly assigned to the \"children\" slot.&lt;/p&gt;\n        &lt;p&gt;This one too :)&lt;/p&gt;\n    &lt;/Card&gt;\n&lt;/template&gt;\n</code></pre>"}]}